# Task ID: 3
# Title: Implement Tile Grid & Placement UI (Single-Player)
# Status: done
# Dependencies: None
# Priority: medium
# Description: Render 40×40 grid, 15-second tile offer cycle, placement rules, banking queue and starter setup.
# Details:
Frontend/TypeScript:
• const grid = new Map<string, Tile>(); // key = `${x},${y}`
• PixiJS container per tile; use viewport plugin for pan/zoom.
• setInterval(15_000, () => showTileOptions());
• showTileOptions(): draws modal with 3 random tiles, onClick => placeTile(x,y, tile).
• placeTile validates adjacency (touches ≥1 tile), updates grid and UI.
• Maintain `bank:Array<Tile>` size ≤3; user can drag queued tiles.
• Init function seeds quadrants with capital cities, scatters resources/marshes.
• Persist state in localStorage for reload resilience.


# Test Strategy:
Cypress e2e:
1. Load page ⇒ expect 4 capitals placed.
2. Wait 15s ⇒ modal appears with 3 tiles.
3. Click tile, hover valid square ⇒ highlight, click ⇒ tile placed.
4. Try illegal placement ⇒ placement rejected.
5. Queue >3 tiles ⇒ oldest discarded.

# Subtasks:
## 1. Implement 40x40 Grid Rendering & Viewport [done]
### Dependencies: None
### Description: Set up the visual 40x40 tile grid using PixiJS, ensuring each tile has its own container. Integrate the viewport plugin for pan and zoom functionality, allowing users to navigate the large grid.
### Details:
Render 40×40 grid. PixiJS container per tile; use viewport plugin for pan/zoom.
<info added on 2025-07-15T17:22:00.984Z>
Completed implementation of Subtask 3.1:

• Integrated pixi-viewport (drag, pinch, wheel, clamp; zoom 0.5×–3×).  
• Refactored GameRenderer to create a Viewport and populate 40 × 40 tile containers at correct world coordinates.  
• Added subtle gridline background and per-tile rendering with colour/symbol by type.  
• Enabled interactivity: hover highlights, click dispatches custom `tile:select` events.  
• Implemented tile-highlight utility for valid placement previews.  
• Viewport script embedded in index.html and verified on desktop/mobile.

Grid is now fully navigable and responsive; marking Subtask 3.1 as complete and ready to begin Subtask 3.2 (Initial Map Setup & Local Storage).
</info added on 2025-07-15T17:22:00.984Z>

## 2. Implement Initial Map Setup & Local Storage [done]
### Dependencies: 3.1
### Description: Develop the initialization function responsible for seeding the game map with starting elements, specifically placing capital cities in quadrants and scattering resources/marshes. Also, implement state persistence using localStorage to ensure game state can be reloaded.
### Details:
Init function seeds quadrants with capital cities, scatters resources/marshes. Persist state in localStorage for reload resilience.
<info added on 2025-07-15T17:26:35.603Z>
Completed implementation:

• initializeMap(): wipes grid, instantiates 40×40 Tile objects, and calls placeCapitalCities(), scatterResourceTiles()  
• placeCapitalCities(): drops 4 capitals at (10,10), (30,10), (10,30), (30,30) and assigns owners  
• scatterResourceTiles(): randomly selects 3 legal coordinates per resource type (mine, orchard, monastery, marsh) while enforcing ≥3-tile Manhattan distance from any capital  
• Tile model expanded to include {type, resources, hp, edges, ownerId} and adjacency helpers  

Persistence layer:  
• saveToLocalStorage(), loadFromLocalStorage(), clearLocalStorage() with versioning key "civ-game-v1"  
• enableAutoSave(intervalMs = 10_000) / disableAutoSave() integrated into Game lifecycle (init, beforeunload)  

UI hooks:  
• setupInitialState() now attempts load → fallback initializeMap() → immediate render  
• tileRenderer draws all seeded tiles on first frame  

Outcome: initial board renders deterministically, resource yields are correct, and full game state survives page refreshes. Subtask 3.2 is now functionally complete.
</info added on 2025-07-15T17:26:35.603Z>

## 3. Implement 15-Second Tile Offer Cycle & Modal [done]
### Dependencies: 3.1
### Description: Create a mechanism to periodically offer new tiles to the player every 15 seconds. This involves a modal UI that displays 3 random tile options, allowing the user to select one for placement.
### Details:
setInterval(15_000, () => showTileOptions()); showTileOptions(): draws modal with 3 random tiles, onClick => placeTile(x,y, tile).
<info added on 2025-07-15T17:29:39.054Z>
Implemented full production-ready tile offer system:

• Game lifecycle hooks: startPlacementCycle() begins 15-sec setInterval after game start; stopPlacementCycle() clears timer on game end or modal close to prevent leaks.  
• Modal pipeline: initializeModal() sets DOM refs/listeners; showTileOptions() populates and opens modal every 15 s; closeModal() handles teardown.  
• Tile generation: generateTileOptions() pulls three random Tile prototypes, enriching them via getTileResources(), generateTileEdges(), getTileHP(); resource mapping added (mines=25 g, orchards=25 f, monasteries=25 f, cities=15 g+15 f).  
• Selection timer: 15-s countdown shown in modal, pulses during final 5 s, auto-selects first tile on expiry.  
• Tile bank: addToTileBank() maintains a FIFO queue capped at 3 entries for later placement.  
• UI/UX polish: responsive preview cards (120 px), color-coded resource badges, hover/scale animations, countdown pulse.  
• All timers, listeners, and DOM nodes are cleaned up on modal close or game end.  

Subtask 3.3 is now feature-complete and ready for hand-off to Subtask 3.4 (Tile Placement Rules & Grid Update).
</info added on 2025-07-15T17:29:39.054Z>

## 4. Implement Tile Placement Rules & Grid Update [done]
### Dependencies: 3.1
### Description: Develop the core `placeTile` function responsible for validating tile placement based on adjacency rules (must touch at least one existing tile). Upon valid placement, update the internal `grid` data structure and reflect the change in the UI.
### Details:
placeTile validates adjacency (touches ≥1 tile), updates grid and UI. const grid = new Map<string, Tile>(); // key = `${x},${y}`
<info added on 2025-07-15T17:33:54.288Z>
Implementation completed and validated:

• Added comprehensive placeTile() pipeline (isValidCoordinate, hasAdjacentTile, isEdgeCompatible, edgesMatch) enforcing full adjacency and edge-matching rules.  
• Edge compatibility matrix: field↔any, city↔city/field, marsh↔marsh/field; rejects all other combinations.  
• Grid mutation: tiles stored in Map<"x,y",Tile>, owner/workers/timestamp auto-assigned, ‘tilePlaced’ event dispatched and state persisted to localStorage.  
• getValidPlacementPositions() scans entire 40×40 grid, returns highlight list for UI; scales efficiently with grid size.  
• Placement-mode UI: enter/exit flows, green highlight for valid cells, red flash + toast on invalid attempt, cancel button & Esc support.  
• Interactive grid hooks: unified tileClick dispatcher, showPlacementError(), placement instruction overlay.  
• Resource manager integration: automatic resource grant on successful placement.  
• All flows tested: adjacency, edge rules, UI feedback, persistence across refresh. Subtask functionality considered complete; ready to advance to Tile Banking Queue implementation.
</info added on 2025-07-15T17:33:54.288Z>

## 5. Implement Tile Banking Queue & User Interaction [done]
### Dependencies: 3.1, 3.4
### Description: Create and manage a tile banking queue (`bank:Array<Tile>`) that holds up to 3 tiles. Implement functionality for users to drag tiles from this queue onto the grid for placement. Ensure the queue size is maintained, discarding the oldest tile if a new one is added when the bank is full.
### Details:
Maintain bank:Array<Tile> size ≤3; user can drag queued tiles.
<info added on 2025-07-15T17:39:03.928Z>
Implemented full tile banking system and user interaction layer:

• FIFO queue (`bank:Array<Tile>`) capped at 3; `addToTileBank()` auto-drops oldest entry when full, `removeTileFromBank()` cleans up UI/state.  
• Bottom-right Tile Bank UI with header count (e.g., “2/3”), empty-state message, and rich preview cards showing type, resources, HP.  
• Click-to-place flow: `selectTileFromBank()` enters placement mode, `clearBankSelection()` resets on success/failure.  
• Drag-and-drop flow: HTML5 drag attributes on cards, drag overlay with opacity/rotation; canvas `dragover`/`drop` events call `handleCanvasDrop()`—converts viewport→world→grid and invokes existing placement validation.  
• Events: `tileSelectedFromBank`, `tileDragStart`, `tileDragEnd`; maintains `draggedTile` & `draggedTileIndex`, resets cleanly after placement.  
• CSS: ~150 lines for responsive layout, hover/drag animations, z-index layering.  
• Automated UI refresh on every add/remove; visual feedback for valid/invalid targets; queue behavior verified via manual and automated tests.
</info added on 2025-07-15T17:39:03.928Z>

